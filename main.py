import sqlite3
import config_bot
import text
import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types.message import ContentType
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove # import –∫–Ω–æ–ø–æ–∫



# sql
cur = sqlite3.connect('promocode.db')
cursor = cur.cursor()


async def on_startup(_):
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')


logging.basicConfig(level=logging.INFO)
bot = Bot(token=config_bot.TOKEN)
dp = Dispatcher(bot)
#–∫–Ω–æ–ø–∫–∏ –≤ –±–æ—Ç–µ
kb = [
    [types.KeyboardButton(text="–î–∞–≤–∞–π")],
    [types.KeyboardButton(text="–ø–æ–¥–ø–∏—Å–∫–∞ Yandex")],
    [types.KeyboardButton(text="–ø–æ–¥–ø–∏—Å–∫–∞ Netflix")]
]
keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

kb1 = [
    [types.KeyboardButton(text="–í–∞—É")],
    [types.KeyboardButton(text="–ø–æ–¥–ø–∏—Å–∫–∞ Yandex")],
    [types.KeyboardButton(text="–ø–æ–¥–ø–∏—Å–∫–∞ Netflix")]
]
keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb1, resize_keyboard=True)

kb2 = [
    [types.KeyboardButton(text="–ø–æ–¥–ø–∏—Å–∫–∞ Yandex")],
    [types.KeyboardButton(text="–ø–æ–¥–ø–∏—Å–∫–∞ Netflix")]
]
keyboard2 = types.ReplyKeyboardMarkup(keyboard=kb2, resize_keyboard=True)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(
        f"""ü§ñ–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.username}</b>! –†–∞–¥ —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –≤—ã –ø–æ–ø–∞–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω —Å —Å–∞–º—ã–º–∏ –Ω–∏–∑–∫–∏–º–∏ —Ü–µ–Ω–∞–º–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Seller Projectü§ñ. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ—á–µ–º—É Seller Project - –ª—É—á—à–∏–π –º–∞–≥–∞–∑–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤?""",
        parse_mode='HTML', reply_markup=keyboard)
    await message.delete()

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã help
@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    await message.answer(text.HELP_COMMAND)
    await message.delete()

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def answer(message: types.Message):
    if message.text == '–î–∞–≤–∞–π':  # message.text.lower() == '–¥–∞' or message.text.lower() == '—Ä–∞—Å—Å–∫–∞–∂–∏' or
        await message.answer(text.ADVANTAGES_ANSWER, reply_markup=keyboard1)
    if message.text == '–í–∞—É':
        await message.answer(
            f'–ú—ã —É–º–µ–µ–º —É–¥–∏–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. {message.from_user.username}, –¥–∞–≤–∞–π—Ç–µ –ø–æ–∫–∞–∂—É –≤–µ—Å—å –Ω–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç',
            reply_markup=keyboard2)
        
    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if message.text == '–ø–æ–¥–ø–∏—Å–∫–∞ Yandex':
        PRICE = types.LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ Yandex', amount=12 * 100)
        if config_bot.PAYMENTS_TOKEN.split(":")[1] == 'TEST':
            await bot.send_message(message.chat.id, '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂')

        await bot.send_invoice(message.chat.id,
                               title='–ü–æ–¥–ø–∏—Å–∫–∞ Yandex',
                               description=text.YANDEX,
                               provider_token=config_bot.PAYMENTS_TOKEN,
                               currency='rub',
                               photo_url='https://clck.ru/344DiK',
                               photo_height=1300,
                               photo_width=1300,
                               photo_size=1300,
                               is_flexible=False,
                               prices=[PRICE],
                               start_parameter='Yandex',
                               payload='tets-invoice-payload')

    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞
    @dp.pre_checkout_query_handler(lambda query: True)
    async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
        await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫  —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
    @dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
    async def successful_payment(message: types.Message):
        print('Successful')
        payment_info = message.successful_payment.to_python()
        for k, v in payment_info.items():
            print(f'{k} = {v}')
        await bot.send_message(message.chat.id,
                               f'–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ')

        result = cur.execute(
            """SELECT promocode FROM netflix WHERE id = 1 """).fetchall()
        result = result[0][0]
        await bot.send_message(message.chat.id,
                               f'–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: {result}')

        cur.execute("""DELETE from yandex where id = 1 """)
        cur.commit()

        cur.execute("""UPDATE yandex 
                        SET id = id - 1
                        WHERE id > 1""")
        cur.commit()

    if message.text == '–ø–æ–¥–ø–∏—Å–∫–∞ Netflix':
        PRICE = types.LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ Netflix', amount=10 * 100)
        if config_bot.PAYMENTS_TOKEN.split(":")[1] == 'TEST':
            await bot.send_message(message.chat.id, '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂')

        await bot.send_invoice(message.chat.id,
                               title='–ü–æ–¥–ø–∏—Å–∫–∞ Netflix',
                               description=text.NETFLIX,
                               provider_token=config_bot.PAYMENTS_TOKEN,
                               currency='rub',
                               photo_url='https://clck.ru/344EfA',
                               photo_height=1300,
                               photo_width=1300,
                               photo_size=1300,
                               is_flexible=False,
                               prices=[PRICE],
                               start_parameter='Netflix',
                               payload='tets-invoice-payload')

    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞
    @dp.pre_checkout_query_handler(lambda query: True)
    async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
        await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫  —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
    @dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
    async def successful_payment(message: types.Message):
        print('Successful')
        payment_info = message.successful_payment.to_python()
        for k, v in payment_info.items():
            print(f'{k} = {v}')
        await bot.send_message(message.chat.id,
                               f'–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ')

        result = cur.execute(
            """SELECT promocode FROM netflix WHERE id = 1 """).fetchall()
        result = result[0][0]
        await bot.send_message(message.chat.id,
                               f'–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: {result}')

        result = """DELETE from netflix where id = 1 """
        cur.commit()

        cur.execute("""UPDATE netflix
                        SET id = id - 1
                        WHERE id > 1""")
        cur.commit()


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
