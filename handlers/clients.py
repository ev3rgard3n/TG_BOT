from bot import dp, bot
from aiogram import types
from keyboards import keyboards
from aiogram.types.message import ContentType
import text
import config_bot
import mongodb


async def start(message: types.Message):
    try:
        await message.answer(
            f"""ü§ñ–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.username}</b>! –†–∞–¥ —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ —Ç—ã –ø–æ–ø–∞–ª –≤ –º–∞–≥–∞–∑–∏–Ω —Å–∞–º—ã—Ö –Ω–∏–∑–∫–∏—Ö —Ü–µ–Ω –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Seller Projectü§ñ.\n–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ—á–µ–º—É Seller Project - –ª—É—á—à–∏–π –º–∞–≥–∞–∑–∏–Ω –ø–æ–¥–ø–∏—Å–æ–∫?""",
            parse_mode='HTML', reply_markup=keyboards.mainmenu)
        await message.delete()

    except Exception as e:
        print(e)


async def all_keyboards(message: types.Message):
    try:
        a = message.chat.id
        match message.text:
            case "–†–∞—Å—Å–∫–∞–∂–∏!":
                await bot.send_message(chat_id=message.chat.id, text=f'1. –°–∞–º—ã–µ –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã –≤ –º–∏—Ä–µ\n2. –ë–æ–ª–µ–µ 1000 –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤\n3. –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ª—é–±–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ', reply_markup=keyboards.yandex_netflix)
            case  "–ú–∞–≥–∞–∑–∏–Ω":
                await bot.send_message(chat_id=message.chat.id, text='–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å –∏–ª–∏ Netflix?', reply_markup=keyboards.yandex_netflix)
            case "–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å":
                await bot.send_photo(chat_id=message.chat.id, caption=text.YANDEX, photo='https://clck.ru/344DiK', reply_markup=keyboards.yandex_all)
            case "Netflix":
                await bot.send_photo(chat_id=message.chat.id, caption=text.NETFLIX, photo='https://clck.ru/344EfA', reply_markup=keyboards.netflix_all)
            case _:
                await bot.send_message(chat_id=message.chat.id, text='–Ø –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç –º–µ–Ω—è')
    except Exception as e:
        print(e)


async def inline_yandex(call: types.CallbackQuery):
    try:
        user_id = call.message.chat.id
        match call.data:
            case "yandex_month":
                PRICE = types.LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ Yandex', amount=12 * 1000)
                if config_bot.PAYMENTS_TOKEN.split(":")[1] == 'TEST':
                    await bot.send_message(chat_id=call.message.chat.id, text='–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂')
                await bot.send_invoice(chat_id=call.message.chat.id,
                                        title='–ü–æ–¥–ø–∏—Å–∫–∞ –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å 1 –º–µ—Å—è—Ü',
                                        description=text.YANDEX,
                                        provider_token=config_bot.PAYMENTS_TOKEN,
                                        currency='rub',
                                        photo_url='https://clck.ru/344DiK',
                                        photo_height=1300,
                                        photo_width=1300,
                                        photo_size=1300,
                                        is_flexible=False,
                                        prices=[PRICE],
                                        start_parameter='Yandex',
                                        payload='tets-invoice-payload')


                @dp.pre_checkout_query_handler(lambda query: True)
                async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
                    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


                @dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
                async def successful_payment(message: types.Message):
                    print('Successful')
                    payment_info = message.successful_payment.to_python()
                    for k, v in payment_info.items():
                        print(f'{k} = {v}')
                    await bot.send_message(chat_id=call.message.chat.id, 
                                        text=f'–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ')
                    
                    result = await mongodb.yandex_month(user_id)
                    await bot.send_message(chat_id=call.message.chat.id, text=result['promo'])
            
            case "yandex_6month":
                PRICE = types.LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ Yandex', amount=38 * 1000)
                if config_bot.PAYMENTS_TOKEN.split(":")[1] == 'TEST':
                    await bot.send_message(chat_id=call.message.chat.id, text='–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂')
                await bot.send_invoice(chat_id=call.message.chat.id,
                                        title='–ü–æ–¥–ø–∏—Å–∫–∞ –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤',
                                        description=text.YANDEX,
                                        provider_token=config_bot.PAYMENTS_TOKEN,
                                        currency='rub',
                                        photo_url='https://clck.ru/344DiK',
                                        photo_height=1300,
                                        photo_width=1300,
                                        photo_size=1300,
                                        is_flexible=False,
                                        prices=[PRICE],
                                        start_parameter='Yandex',
                                        payload='tets-invoice-payload')

                @dp.pre_checkout_query_handler(lambda query: True)
                async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
                    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


                @dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
                async def successful_payment(message: types.Message):
                    print('Successful')
                    payment_info = message.successful_payment.to_python()
                    for k, v in payment_info.items():
                        print(f'{k} = {v}')
                    await bot.send_message(chat_id=call.message.chat.id, 
                                        text=f'–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ')
                    result = await mongodb.yandex_6month(user_id)
                    await bot.send_message(chat_id=call.message.chat.id, text=result['promo'])

            case "yandex_12month":
                PRICE = types.LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ Yandex', amount=12 * 10000)
                if config_bot.PAYMENTS_TOKEN.split(":")[1] == 'TEST':
                    await bot.send_message(chat_id=call.message.chat.id, text='–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂')
                await bot.send_invoice(chat_id=call.message.chat.id,
                                        title='–ü–æ–¥–ø–∏—Å–∫–∞ –Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤',
                                        description=text.YANDEX,
                                        provider_token=config_bot.PAYMENTS_TOKEN,
                                        currency='rub',
                                        photo_url='https://clck.ru/344DiK',
                                        photo_height=1300,
                                        photo_width=1300,
                                        photo_size=1300,
                                        is_flexible=False,
                                        prices=[PRICE],
                                        start_parameter='Yandex',
                                        payload='tets-invoice-payload')

                # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞
                @dp.pre_checkout_query_handler(lambda query: True)
                async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
                    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


                @dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
                async def successful_payment(message: types.Message):
                    print('Successful')
                    payment_info = message.successful_payment.to_python()
                    for k, v in payment_info.items():
                        print(f'{k} = {v}')
                    await bot.send_message(chat_id=call.message.chat.id, 
                                        text=f'–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ')
                    result = await mongodb.yandex_12month(user_id)
                    await bot.send_message(chat_id=call.message.chat.id, text=result['promo'])
            
            case _:
                pass
    except Exception as e:
        print(e)


async def inline_netflix(call: types.CallbackQuery):
    try:
        user_id = call.message.chat.id
        match call.data:
            case "netflix_month":
                PRICE = types.LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ Yandex', amount=12 * 1000)
                if config_bot.PAYMENTS_TOKEN.split(":")[1] == 'TEST':
                    await bot.send_message(chat_id=call.message.chat.id, text='–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂')
                await bot.send_invoice(chat_id=call.message.chat.id,
                                        title='–ü–æ–¥–ø–∏—Å–∫–∞ Netflix 1 –º–µ—Å—è—Ü',
                                        description=text.NETFLIX,
                                        provider_token=config_bot.PAYMENTS_TOKEN,
                                        currency='rub',
                                        photo_url='https://clck.ru/344DiK',
                                        photo_height=1300,
                                        photo_width=1300,
                                        photo_size=1300,
                                        is_flexible=False,
                                        prices=[PRICE],
                                        start_parameter='Netflix',
                                        payload='tets-invoice-payload')

                # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞
                @dp.pre_checkout_query_handler(lambda query: True)
                async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
                    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


                @dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
                async def successful_payment(message: types.Message):
                    print('Successful')
                    payment_info = message.successful_payment.to_python()
                    for k, v in payment_info.items():
                        print(f'{k} = {v}')
                    await bot.send_message(chat_id=call.message.chat.id, 
                                        text=f'–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ')
                    result = await mongodb.Netflix_month(user_id)
                    await bot.send_message(chat_id=call.message.chat.id, text=result['promo'])
            
            case "netflix_6month":
                PRICE = types.LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ Netflix', amount=38 * 1000)
                if config_bot.PAYMENTS_TOKEN.split(":")[1] == 'TEST':
                    await bot.send_message(chat_id=call.message.chat.id, text='–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂')
                await bot.send_invoice(chat_id=call.message.chat.id,
                                        title='–ü–æ–¥–ø–∏—Å–∫–∞ Netflix –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤',
                                        description=text.NETFLIX,
                                        provider_token=config_bot.PAYMENTS_TOKEN,
                                        currency='rub',
                                        photo_url='https://clck.ru/344EfA',
                                        photo_height=1300,
                                        photo_width=1300,
                                        photo_size=1300,
                                        is_flexible=False,
                                        prices=[PRICE],
                                        start_parameter='Netflix',
                                        payload='tets-invoice-payload')

                # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞
                @dp.pre_checkout_query_handler(lambda query: True)
                async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
                    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


                @dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
                async def successful_payment(message: types.Message):
                    print('Successful')
                    payment_info = message.successful_payment.to_python()
                    for k, v in payment_info.items():
                        print(f'{k} = {v}')
                    await bot.send_message(chat_id=call.message.chat.id, 
                                        text=f'–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ')
                    result = await mongodb.Netflix_6month(user_id)
                    await bot.send_message(chat_id=call.message.chat.id, text=result['promo'])
            
            case "netflix_12month":
                PRICE = types.LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ Netflix', amount=12 * 10000)
                if config_bot.PAYMENTS_TOKEN.split(":")[1] == 'TEST':
                    await bot.send_message(chat_id=call.message.chat.id, text='–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂')
                await bot.send_invoice(chat_id=call.message.chat.id,
                                        title='–ü–æ–¥–ø–∏—Å–∫–∞ Netflix –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤',
                                        description=text.NETFLIX,
                                        provider_token=config_bot.PAYMENTS_TOKEN,
                                        currency='rub',
                                        photo_url='https://clck.ru/344EfA',
                                        photo_height=1300,
                                        photo_width=1300,
                                        photo_size=1300,
                                        is_flexible=False,
                                        prices=[PRICE],
                                        start_parameter='Netflix',
                                        payload='tets-invoice-payload')

                # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞
                @dp.pre_checkout_query_handler(lambda query: True)
                async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
                    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


                @dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
                async def successful_payment(message: types.Message):
                    print('Successful')
                    payment_info = message.successful_payment.to_python()
                    for k, v in payment_info.items():
                        print(f'{k} = {v}')
                    await bot.send_message(chat_id=call.message.chat.id, 
                                        text=f'–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ')
                    result = await mongodb.Netflix_12month(user_id)
                    await bot.send_message(chat_id=call.message.chat.id, text=result['promo'])
            
            case _:
                pass
    except Exception as e:
        print(e)


def register_client_handler():
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(all_keyboards, state=None)
    dp.register_callback_query_handler(inline_yandex, state=None)
    dp.register_callback_query_handler(inline_netflix, state=None)
